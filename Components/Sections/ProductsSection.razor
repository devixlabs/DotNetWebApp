@using DotNetWebApp.Components.Pages

<div class="products-section">
    <div class="products-header">
        <h4>Products Management</h4>
        <div class="products-actions">
            <button class="btn btn-primary" @onclick="OnRefresh" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span>üîÑ Loading...</span>
                }
                else
                {
                    <span>üîÑ Refresh</span>
                }
            </button>
            <button class="btn btn-success" @onclick="AddNewProduct">
                ‚ûï Add Product
            </button>
        </div>
    </div>

    @if (IsLoading && (Products == null || Products.Count == 0))
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
            <p>Loading products...</p>
        </div>
    }
    else if (Products == null || Products.Count == 0)
    {
        <div class="empty-state">
            <p>No products found.</p>
            <button class="btn btn-primary" @onclick="OnRefresh">Load Products</button>
        </div>
    }
    else
    {
        <div class="products-grid">
            @foreach (var product in Products)
            {
                <div class="product-card">
                    <div class="product-header">
                        <h5>@product.Name</h5>
                        <span class="product-price">$@product.Price.ToString("N2")</span>
                    </div>
                    <p class="product-description">@product.Description</p>
                    <div class="product-actions">
                        <button class="btn btn-sm btn-outline" @onclick="() => EditProduct(product.Id)">
                            ‚úèÔ∏è Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">
                            üóëÔ∏è Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .products-section {
        padding: 20px;
    }

    .products-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #dee2e6;
    }

    .products-header h4 {
        margin: 0;
        color: #333;
    }

    .products-actions {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #0056b3;
    }

    .btn-success {
        background: #28a745;
        color: white;
    }

    .btn-success:hover {
        background: #1e7e34;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .btn-outline {
        background: white;
        border: 1px solid #007bff;
        color: #007bff;
    }

    .btn-outline:hover {
        background: #007bff;
        color: white;
    }

    .btn-sm {
        padding: 4px 8px;
        font-size: 12px;
    }

    .loading-state, .empty-state {
        text-align: center;
        padding: 40px;
        color: #6c757d;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .product-card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
    }

    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .product-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .product-header h5 {
        margin: 0;
        color: #333;
    }

    .product-price {
        font-weight: bold;
        color: #28a745;
        font-size: 18px;
    }

    .product-description {
        color: #6c757d;
        margin: 10px 0;
        line-height: 1.4;
    }

    .product-actions {
        display: flex;
        gap: 8px;
        margin-top: 15px;
    }
</style>

@code {
    [Parameter] public List<SpaApp.Product>? Products { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private async Task AddNewProduct()
    {
        // In a real app, this would open a modal or navigate to an add form
        await Task.Delay(100); // Placeholder
        Console.WriteLine("Add new product clicked");
    }

    private async Task EditProduct(int productId)
    {
        // In a real app, this would open edit modal or form
        await Task.Delay(100); // Placeholder
        Console.WriteLine($"Edit product {productId} clicked");
    }

    private async Task DeleteProduct(int productId)
    {
        // In a real app, this would show confirmation and delete
        await Task.Delay(100); // Placeholder
        Console.WriteLine($"Delete product {productId} clicked");
    }
}