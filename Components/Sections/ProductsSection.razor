@using DotNetWebApp.Components.Pages

<div class="products-section">
    <div class="products-header">
        <h4>Products Management</h4>
        <div class="products-actions">
            <RadzenButton Click="OnRefresh" IsBusy="@IsLoading" Text="@(IsLoading ? "Loading..." : "Refresh")" 
                         Icon="refresh" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click="AddNewProduct" Text="Add Product" Icon="add" 
                         ButtonStyle="ButtonStyle.Success" />
        </div>
    </div>

    @if (Products == null || Products.Count == 0)
    {
        @if (IsLoading)
        {
            <div class="loading-state">
                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                <p>Loading products...</p>
            </div>
        }
        else
        {
            <div class="empty-state">
                <p>No products found.</p>
                <RadzenButton Click="OnRefresh" Text="Load Products" ButtonStyle="ButtonStyle.Primary" />
            </div>
        }
    }
    else
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowSorting="true" PageSize="5" AllowPaging="true" 
                       ShowPagingSummary="true" Data="@Products" TItem="SpaApp.Product" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="SpaApp.Product" Property="Id" Title="ID" Width="80px" />
                <RadzenDataGridColumn TItem="SpaApp.Product" Property="Name" Title="Product Name" />
                <RadzenDataGridColumn TItem="SpaApp.Product" Property="Price" Title="Price" FormatString="{0:C}">
                    <Template Context="product">
                        <strong style="color: #28a745;">@($"{product.Price:C}")</strong>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SpaApp.Product" Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="200px">
                    <Template Context="product">
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="edit" class="m-1" Click="@(args => EditProduct(product.Id))" />
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" class="m-1" Click="@(args => DeleteProduct(product.Id))" />
                    </Template>
                    <HeaderTemplate>
                        <span>Actions</span>
                    </HeaderTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

<style>
    .products-section {
        padding: 20px;
    }

    .products-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .products-header h4 {
        margin: 0;
        color: white;
    }

    .products-actions {
        display: flex;
        gap: 10px;
    }

    .loading-state, .empty-state {
        text-align: center;
        padding: 40px;
        color: rgba(255, 255, 255, 0.7);
    }

    .loading-state p, .empty-state p {
        margin-top: 20px;
        color: rgba(255, 255, 255, 0.7);
    }
</style>

@code {
    [Parameter] public List<SpaApp.Product>? Products { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private async Task AddNewProduct()
    {
        // In a real app, this would open a modal or navigate to an add form
        await Task.Delay(100); // Placeholder
        Console.WriteLine("Add new product clicked");
    }

    private async Task EditProduct(int productId)
    {
        // In a real app, this would open edit modal or form
        await Task.Delay(100); // Placeholder
        Console.WriteLine($"Edit product {productId} clicked");
    }

    private async Task DeleteProduct(int productId)
    {
        // In a real app, this would show confirmation and delete
        await Task.Delay(100); // Placeholder
        Console.WriteLine($"Delete product {productId} clicked");
    }
}